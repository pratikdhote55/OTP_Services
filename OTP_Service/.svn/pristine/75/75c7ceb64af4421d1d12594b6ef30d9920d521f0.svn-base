/*
 * 
 */
package in.cdac.epramaan.otp.util;

import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Properties;
import java.util.UUID;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.NoSuchProviderException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import in.cdac.epramaan.otp.dao.DaoOperation;

/*import in.cdac.epramaan.common.bd.MasterConfigBD;
import in.cdac.epramaan.common.model.EmailLinkParameters;*/

/**
 * The Class EmailService.
 */
// @ComponentScan("in.cdac.epramaan")
@Component
public class EmailService {

	/*
	 * @Autowired MasterConfigBD masterConfigBD;
	 */
	@Autowired
	DaoOperation daoOperation;

	/** The Constant logger. */
	private static final Logger logger = LoggerFactory.getLogger(EmailService.class);

	/**
	 * Send email.
	 *
	 * @param email
	 *            the email
	 * @param emailSubject
	 *            the email subject
	 * @param emailContent
	 *            the email content
	 * @return true, if successful
	 */
	public boolean sendEmail(String email, String emailSubject, String emailContent, String smtpHost, String smtpPort,
			String smtpUserId, String smtpPassword,UUID txnId) {

		final String userId = smtpUserId;
		final String userPassword = smtpPassword;
		Properties props = new Properties();
		props.put("mail.smtp.host", smtpHost);
		props.put("mail.smtp.port", smtpPort);
		// startttls is required true, set smtp auth true and set start enable
		// false for SMTP Authentication
		props.put("mail.smtp.starttls.enable", "false");
		// props.put("mail.smtp.starttls.required", "true");
		props.put("mail.smtp.auth", "false");
		// If you need to authenticate
		String email_from = smtpUserId;
		String email_to = email;

		logger.debug("in email service");
//		logger.info("username : -" + userId + "-");
//		logger.info("password : -" + userPassword + "-");

		// For Authentication pass UserId and Password.
		Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(userId, userPassword);
			}
		});

		try {
			Message message = new MimeMessage(session);
			message.setFrom(new InternetAddress(email_from));
			message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(email_to));
			message.setSubject(emailSubject);
			message.setContent(emailContent, "text/html");
			logger.debug("Sending email through transport.");
			Transport.send(message);
			// session.getTransport().
			logger.debug("Email sent to " + email_to);
			Timestamp timestamp = new Timestamp(Calendar.getInstance().getTimeInMillis());
			System.out.println(daoOperation == null);
			daoOperation.setEmailDeliveryTime(txnId, timestamp);
			return true;
		} catch (MessagingException e) {
			logger.error("Unable to send OTP via email : ", e);
			return false;
		}
	}

	/*
	 * public EmailLinkParameters evaluateEmailQueryString(String queryString) {
	 * EmailLinkParameters linkParameters = new EmailLinkParameters(); //The
	 * format expected is that the first parameters value will be the key in the
	 * query //The second parameter is expected to be a code String[] split =
	 * queryString.split("&"); String[] splitemail = split[0].split("=");
	 * linkParameters.setKey(splitemail[1]);
	 * logger.debug("Verification id from query string : " +
	 * linkParameters.getKey()); String[] splitverificationcode =
	 * split[1].split("="); linkParameters.setCode(splitverificationcode[1]);
	 * return linkParameters; }
	 */
}
